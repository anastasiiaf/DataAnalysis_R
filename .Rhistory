source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,150,0.05,0.15,5,10,1000)
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,150,0.05,0.15,5,10,1000)
source('~/EXAM.R')
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,150,0.05,0.15,5,10,1000)
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,150,0.05,0.15,5,10,1000)
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,150,0.05,0.15,5,10,1000)
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,150,0.05,0.15,5,10,1000)
source('~/EXAM.R')
Gamma_Call_LR
dnorm(d1,0,1)/(100*sigma*sqrt(T))
source('~/EXAM.R')
Gamma_Call_LR
Gamma_Put_LR
source('~/EXAM.R')
source('~/EXAM.R')
Vega_Call_LR
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
Vega_Call_LR
Vega_Put_LR
Gamma_Call_LR
Gamma_Put_LR
Vega_Call_Pathwise
Vega_Put_Pathwise
100*dnorm(d1,0,1)*1/sqrt(T)
VegaFDMPut_two_sided
VegaFDMCall_two_sided
source('~/EXAM.R')
Vega_Put_Pathwise
Vega_Call_Pathwise
VegaFDMPut_two_sided
VegaFDMCall_two_sided
Vega_Call_LR
Vega_Put_LR
source('~/EXAM.R')
Vega_Call_LR
Vega_Put_LR
Vega_Put_Pathwise
Vega_Call_Pathwise
100*dnorm(d1,0,1)*1/sqrt(T)
source('~/EXAM.R')
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,150,0.05,0.15,5,10,1000)
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,150,0.05,0.15,5,10,1000)
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,150,0.05,0.15,5,10,1000)
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,150,0.05,0.15,5,10,1000)
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,150,0.05,0.15,1,10,1000)
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,0.001,150,0.05,0.15,1,10,1000)
source('~/EXAM.R')
StockPriceChangeMC(100,200,10,0.001,0.001,150,0.05,0.15,1,10,1000)
StockPriceChangeMC(100,200,10,0.001,0.001,150,0.05,0.15,0.5,10,1000)
StockPriceChangeMC(100,200,10,0.001,0.001,150,0.05,0.15,0.5,100,1000)
StockPriceChangeMC(100,200,10,0.001,0.001,100,0.05,0.15,0.5,100,1000)
StockPriceChangeMC(100,300,10,0.001,0.001,150,0.05,0.15,0.5,100,1000)
StockPriceChangeMC(100,300,10,0.001,0.001,180,0.05,0.15,1,100,10000)
source('~/EXAM.R')
source('~/EXAM.R')
OptionPrice_Greeks(10,10,100,0.01,0.01,90,0.05,0.2,1)
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
Pricing_SV(10,10,100,100,0.05,0.1,1,-0.3,2,0.05,0.01,0.1,0.2)
source('~/EXAM.R')
Pricing_SV(10,10,100,100,0.05,0.1,1,-0.3,2,0.05,0.01,0.1,0.2)
source('~/EXAM.R')
source('~/EXAM.R')
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.3,2,0.05,0.01,0.1,0.2)
source('~/EXAM.R')
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.3,2,0.05,0.01,0.1,0.2)
Pricing_SV(10,10000,100,90,0.05,0.1,1,-0.3,2,0.05,0.01,0.1,0.2)
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.6,2,0.05,0.01,0.1,0.2)
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.2,2,0.05,0.01,0.1,0.2)
Pricing_SV(10,10000,100,80,0.05,0.1,1,-0.3,2,0.05,0.01,0.1,0.2)
StockPrice_SV
source('~/EXAM.R')
Pricing_SV(10,10000,100,80,0.05,0.1,1,-0.3,2,0.05,0.01,0.1,0.2)
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.3,2,0.05,0.01,0.1,0.2)
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.3,2,0.05,0.01,0.1,0.1)
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.6,2,0.05,0.01,0.1,0.2)
Pricing_SV(10,10000,100,110,0.05,0.1,1,-0.3,2,0.05,0.01,0.1,0.2)
source('~/EXAM.R')
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.3,0.02,0.2,0.1,0.1)
source('~/EXAM.R')
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.3,0.02,0.2,0.1,0.1)
Pricing_SV(10,10000,100,100,0.05,0.1,1,0.3,0.02,0.2,0.1,0.1)
Pricing_SV(10,10000,100,80,0.05,0.1,1,-0.3,0.02,0.2,0.1,0.1)
Pricing_SV(10,10000,100,80,0.05,0.1,1,0.3,0.02,0.2,0.1,0.1)
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
Pricing_SV(10,10000,100,80,0.05,0.1,1,-0.3,0.02,0.2,0.1,0.1)
source('~/EXAM.R')
Pricing_SV(10,10000,100,80,0.05,0.1,1,-0.3,0.02,0.2,0.1,0.1)
source('~/EXAM.R')
Pricing_SV(10,10000,100,80,0.05,0.1,1,-0.3,0.02,0.2,0.1,0.1)
source('~/EXAM.R')
Pricing_SV(10,10000,100,80,0.05,0.1,1,-0.3,0.02,0.2,0.1,0.1)
source('~/EXAM.R')
Pricing_SV(10,10000,100,80,0.05,0.1,1,-0.3,0.02,0.2,0.1,0.1)
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.3,0.02,0.2,0.1,0.1)
source('~/EXAM.R')
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.3,0.02,0.2,0.1,0.1)
source('~/EXAM.R')
source('~/EXAM.R')
Pricing_SV(100,1000,100,95,0.15,1,-0.3,2,0.01,0.05,0.1,0.1)
Pricing_SV(100,1000,100,95,0.05,0.15,1,-0.3,2,0.01,0.05,0.1,0.1)
Pricing_SV(100,1000,100,80,0.05,0.15,1,-0.3,2,0.01,0.05,0.1,0.1)
Pricing_SV(1000,1000,100,95,0.05,0.15,1,-0.3,2,0.01,0.05,0.1,0.1)
Pricing_SV(100,1000,100,110,0.05,0.15,1,-0.3,2,0.01,0.05,0.1,0.1)
Pricing_SV(10,10000,100,95,0.05,0.15,1,-0.3,2,0.01,0.05,0.1,0.1)
source('~/EXAM.R')
Pricing_SV(10,10000,100,95,0.05,0.15,1,-0.3,2,0.01,0.05,0.1,0.1)
source('~/EXAM.R')
Pricing_SV(10,10,100,95,0.05,0.15,1,-0.3,2,0.01,0.05,0.1,0.1)
source('~/EXAM.R')
Pricing_SV(10,1000,100,95,0.05,0.15,1,-0.3,2,0.01,0.05,0.1,0.1)
Pricing_SV(10,10000,100,95,0.05,0.15,1,-0.6,2,0.01,0.05,0.1,0.1)
Pricing_SV(10,10000,100,95,0.05,0.15,1,0.3,2,0.01,0.05,0.1,0.1)
Pricing_SV(10,10000,100,95,0.05,0.15,1,-0.3,1,0.01,0.05,0.01,0.1)
Pricing_SV(100,10000,100,95,0.05,0.15,1,-0.3,1,0.01,0.05,0.01,0.1)
Pricing_SV(10,10000,100,75,0.05,0.15,1,-0.3,1,0.01,0.05,0.08,0.1)
Pricing_SV(10,10000,100,50,0.05,0.15,1,-0.3,1,0.01,0.05,0.01,0.1)
Pricing_SV(10,10000,100,115,0.05,0.15,1,-0.3,1,0.01,0.05,0.01,0.1)
Pricing_SV(10,10000,100,115,0.05,0.15,1,-0.3,1,0.01,0.01,0.15,0.1)
Pricing_SV(10,10000,100,115,0.05,0.15,1,0.3,1,0.01,0.05,0.01,0.1)
Pricing_SV(10,10000,100,115,0.05,0.15,1,-0.8,1,0.01,0.05,0.01,0.1)
Pricing_SV(10,10000,100,115,0.05,0.15,1,-0.8,1,0.01,0.05,0.15,0.1)
Pricing_SV(10,10000,100,115,0.05,0.15,1,-0.3,1,0.01,0.05,0.01,0.15)
Pricing_SV(10,10000,100,115,0.05,0.1,1,-0.3,1,0.01,0.05,0.01,0.1)
Pricing_SV(10,10000,100,75,0.05,0.1,1,-0.3,1,0.01,0.05,0.01,0.1)
Pricing_SV(10,10000,100,75,0.05,0.1,1,-0.3,1,0.01,0.05,0.01,0.1)
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.3,1,0.01,0.05,0.01,0.1)
Pricing_SV(10,10000,100,75,0.05,0.1,1,-0.3,1,0.01,0.01,0.01,0.1)
Pricing_SV(100,10000,100,40,0.05,0.1,1,-0.3,1,0.01,0.01,0.01,0.1)
Pricing_SV(10,10000,100,75,0.05,0.1,1,0.3,1,0.01,0.01,0.01,0.1)
Pricing_SV(10,10000,100,75,0.05,0.1,1,-0.3,1,0.01,0.01,0.1,0.1)
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.3,1,0.01,0.01,0.01,0.1)
Pricing_SV(10,10000,100,100,0.05,0.1,1,-0.3,1,0.01,0.01,0.1,0.1)
Pricing_SV(10,10000,100,75,0.05,0.1,1,0.3,1,0.01,0.01,0.01,0.1)
source('~/EXAM.R')
Pricing_SV(10,10000,100,89,0.02,0.05,10/365,0.04,1,0.01,0.01,0.05,0.05)
Pricing_SV(10,10000,100,89,0.02,0.05,10/262,0.04,1,0.01,0.01,0.05,0.05)
source('~/EXAM.R')
source('~/EXAM.R')
Pricing_SV(10,10000,100,75,0.05,0.1,1,0.3,1,0.01,0.01,0.01,0.1)
source('~/EXAM.R')
Pricing_SV(10,10000,100,75,0.05,0.1,1,0.3,1,0.01,0.01,0.01,0.1)
Pricing_SV(100,100,100,75,0.05,0.1,1,0.3,1,0.01,0.01,0.01,0.1)
source('~/EXAM.R')
install.packages("formattable")
library("formattable", lib.loc="~/R/win-library/3.3")
source('~/EXAM.R')
Pricing_SV(100,100,100,75,0.05,0.1,1,0.3,1,0.01,0.01,0.01,0.1)
source('~/EXAM.R')
Pricing_SV(100,100,100,75,0.05,0.1,1,0.3,1,0.01,0.01,0.01,0.1)
detach("package:formattable", unload=TRUE)
library("formattable", lib.loc="~/R/win-library/3.3")
detach("package:formattable", unload=TRUE)
install.packages("xtable")
library("xtable", lib.loc="~/R/win-library/3.3")
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
OptionPrice_Greeks(10,10000,100,0.001,0.001,75,0.05,0.15,1)
source('~/EXAM.R')
OptionPrice_Greeks(10,10000,100,0.001,0.001,75,0.05,0.15,1)
OptionPrice_Greeks(10,10000,100,0.001,0.001,75,0.05,0.15,1)
source('~/EXAM.R')
OptionPrice_Greeks(10,10000,100,0.001,0.001,75,0.05,0.15,1)
source('~/EXAM.R')
source('~/EXAM.R')
OptionPrice_Greeks(10,10000,100,0.001,0.001,75,0.05,0.15,1)
source('~/EXAM.R')
OptionPrice_Greeks(10,10000,100,0.001,0.001,75,0.05,0.15,1)
source('~/EXAM.R')
OptionPrice_Greeks(10,10000,100,0.001,0.001,75,0.05,0.15,1)
source('~/EXAM.R')
OptionPrice_Greeks(10,10000,100,0.001,0.001,75,0.05,0.15,1)
OptionPrice_Greeks(10,10000,100,0.001,0.001,75,0.05,0.15,5)
OptionPrice_Greeks(100,10000,100,0.001,0.01,100,0.05,0.15,1)
OptionPrice_Greeks(10,10000,100,0.001,0.001,110,0.05,0.15,1)
OptionPrice_Greeks(10,10000,100,0.001,0.01,75,0.05,0.15,1)
OptionPrice_Greeks(100,10000,100,0.001,0.01,45,0.05,0.15,1)
OptionPrice_Greeks(10,10000,100,0.001,0.001,75,0.05,0.1,1)
source('~/EXAM.R')
StockPriceChangeMC(100,300,10,0.01,0.01,180,0.05,0.15,1,100,1000)
StockPriceChangeMC(100,300,10,0.01,0.01,200,0.05,0.2,1,100,1000)
StockPriceChangeMC(100,300,10,0.01,0.01,200,0.05,0.1,1,100,1000)
StockPriceChangeMC(100,200,10,0.01,0.01,150,0.05,0.15,5,100,1000)
StockPriceChangeMC(100,400,10,0.0001,0.0001,250,0.05,0.15,1,100,1000)
StockPriceChangeMC(100,400,10,0.0001,0.0001,250,0.05,0.15,1,100,10000)
OptionPrice_Greeks(100,10000,100,0.0001,0.0001,75,0.05,0.15,1)
OptionPrice_Greeks(1000,10000,100,0.0001,0.0001,75,0.05,0.15,1)
source('~/EXAM.R')
OptionPrice_Greeks(1000,10000,100,0.0001,0.0001,120,0.05,0.15,1)
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
source('~/EXAM.R')
Pricing_SV(100,10000,100,75,0.05,0.15,1,-0.3,1,0.01,0.01,0.01,0.15)
Pricing_SV(100,10000,100,75,0.05,0.15,0.5,-0.3,1,0.01,0.01,0.01,0.15)
Pricing_SV(100,10000,100,75,0.05,0.1,1,-0.3,1,0.01,0.01,0.01,0.1)
Pricing_SV(10,10000,100,75,0.05,0.15,1,-0.3,1,0.01,0.01,0.01,0.15)
Pricing_SV(10,10000,100,75,0.05,0.07,1,-0.3,1,0.01,0.01,0.01,0.07)
Pricing_SV(100,1000,100,75,0.05,0.1,1,-0.3,1,0.01,0.01,0.01,0.1)
source('~/EXAM.R')
Pricing_SV(100,10000,100,175,0.05,0.15,1,-0.3,1,0.01,0.01,0.01,0.1)
Pricing_SV(100,1000,100,175,0.05,0.15,1,-0.3,1,0.01,0.01,0.01,0.1)
source('~/EXAM.R')
source('~/EXAM.R')
OptionPrice_Greeks(252,10000,100,0.001,0.001,100,0.05,0.1,1)
OptionPrice_Greeks(252,10000,100,0.001,0.001,90,0.05,0.1,1)
OptionPrice_Greeks(252,10000,100,0.001,0.001,90,0.05,0.1,1)
OptionPrice_Greeks(252,10000,100,0.001,0.001,50,0.05,0.1,1)
OptionPrice_Greeks(252,10000,100,0.001,0.001,90,0.05,0.1,1)
OptionPrice_Greeks(252,10000,100,0.001,0.001,120,0.05,0.1,1)
StockPriceChangeMC(100,400,10,0.001,0.001,250,0.05,0.1,1,252,10000)
StockPriceChangeMC(100,400,10,0.001,0.001,250,0.05,0.1,1,100,10000)
StockPriceChangeMC(100,400,10,0.0001,0.0001,250,0.05,0.1,1,252,10000)
Pricing_SV(252,10000,100,100,0.05,0.1,1,-0.3,1,0.01,0.01,0.01,0.1)
Pricing_SV(252,10000,100,90,0.05,0.1,1,-0.3,1,0.01,0.01,0.01,0.1)
Pricing_SV(252,10000,100,50,0.05,0.1,1,-0.3,1,0.01,0.01,0.01,0.1)
Pricing_SV(252,10000,100,120,0.05,0.1,1,-0.3,1,0.01,0.01,0.01,0.1)
Pricing_SV(252,1000,100,120,0.05,0.1,1,-0.3,1,0.01,0.01,0.01,0.1)
source('~/EXAM.R')
source('~/EXAM.R')
Pricing_SV(10,10,100,120,0.05,0.1,1,-0.3,1,0.01,0.01,0.01,0.1)
StockPriceChangeMC(100,400,10,0.0001,0.0001,250,0.05,0.1,1,10,10)
OptionPrice_Greeks(10,10,100,0.001,0.001,120,0.05,0.1,1)
source('~/EXAM.R')
help(format.data.frame)
library(lubridate)
ex <- read.csv('daily_data.csv', stringsAsFactors=FALSE)
ex <- ex[!is.na(ex$last), ]
df <- data.frame(ex)
df$date <- dmy(df$date)
ticker <- df[[1,2]]
type.instr <- df[[1,3]]
#subset(df,subset=rain==TRUE)
interim.df <- data.frame()
sorted.temp <- data.frame()
date.initial <- seq(as.Date("2014-01-01"), as.Date("2017-05-18"), by="days")
final.df <- data.frame(date.initial)
begin <- as.Date("2014-01-01")
end <- as.Date("2017-05-18")
kol <- 1
for (i in 1:nrow(df)){
if (df[i,'ticker'] == ticker & i < nrow(df)){
interim.df <- rbind(interim.df, df[i, c( 'date', 'last')])
}
else  {
kol <- kol+1
final.df <- merge.data.frame(final.df, interim.df[order(interim.df$date),], by.x='date.initial',by.y='date', all=T)
colnames(final.df)[kol] <- paste(ticker, type.instr, sep="_")
interim.df <- interim.df[NULL, ]
ticker <- df[[i,'ticker']]
type.instr <- df[[i,'type']]
}
#if (i == nrow(df))
#{kol <- kol+1
#interim.df[order(interim.df$date),]
#final.df <- merge.data.frame(final.df, interim.df[order(interim.df$date),], by.x='date.initial',by.y='date', all=T)
#colnames(final.df)[kol] <- paste(ticker, type.instr, sep="_")
#interim.df <- interim.df[NULL, ]}
}
#final.df[is.na(final.df)] <- 0
task1.df <- data.frame(date.initial)
i <- 1
cols[1] <- 1
for (j in 2:ncol(final.df)) {
vector <- unlist(strsplit(colnames(final.df)[j], "_", fixed = T))
if (vector[length(vector)] == 64 | vector[length(vector)] == 1024)  {
i <- i+1
cols[i] <- j
}
}
task1.df <- final.df[,cols]
write.csv(task1.df, file = "task1.csv")
# delete rows where 90% of data is NA
task1.df <- task1.df[!rowSums(is.na(task1.df)) >= (ncol(task1.df)-1)*0.9,]
# find the starting row
flag <- T
while (flag == T){
if (rowSums(is.na(task1.df[1,])) > 0)
{    task1.df <- task1.df[-1, ] }
else {flag <- F}
}
library(lubridate)
ex <- read.csv('daily_data.csv', stringsAsFactors=FALSE)
ex <- ex[!is.na(ex$last), ]
df <- data.frame(ex)
df$date <- dmy(df$date)
ticker <- df[[1,2]]
type.instr <- df[[1,3]]
#subset(df,subset=rain==TRUE)
interim.df <- data.frame()
sorted.temp <- data.frame()
date.initial <- seq(as.Date("2014-01-01"), as.Date("2017-05-18"), by="days")
final.df <- data.frame(date.initial)
begin <- as.Date("2014-01-01")
end <- as.Date("2017-05-18")
kol <- 1
for (i in 1:nrow(df)){
if (df[i,'ticker'] == ticker & i < nrow(df)){
interim.df <- rbind(interim.df, df[i, c( 'date', 'last')])
}
else  {
kol <- kol+1
final.df <- merge.data.frame(final.df, interim.df[order(interim.df$date),], by.x='date.initial',by.y='date', all=T)
colnames(final.df)[kol] <- paste(ticker, type.instr, sep="_")
interim.df <- interim.df[NULL, ]
ticker <- df[[i,'ticker']]
type.instr <- df[[i,'type']]
}
#if (i == nrow(df))
#{kol <- kol+1
#interim.df[order(interim.df$date),]
#final.df <- merge.data.frame(final.df, interim.df[order(interim.df$date),], by.x='date.initial',by.y='date', all=T)
#colnames(final.df)[kol] <- paste(ticker, type.instr, sep="_")
#interim.df <- interim.df[NULL, ]}
}
library(lubridate)
ex <- read.csv('daily_data.csv', stringsAsFactors=FALSE)
ex <- ex[!is.na(ex$last), ]
df <- data.frame(ex)
df$date <- dmy(df$date)
ticker <- df[[1,2]]
type.instr <- df[[1,3]]
#subset(df,subset=rain==TRUE)
interim.df <- data.frame()
sorted.temp <- data.frame()
date.initial <- seq(as.Date("2014-01-01"), as.Date("2017-05-18"), by="days")
final.df <- data.frame(date.initial)
begin <- as.Date("2014-01-01")
end <- as.Date("2017-05-18")
kol <- 1
for (i in 1:nrow(df)){
if (df[i,'ticker'] == ticker & i < nrow(df)){
interim.df <- rbind(interim.df, df[i, c( 'date', 'last')])
}
else  {
kol <- kol+1
final.df <- merge.data.frame(final.df, interim.df[order(interim.df$date),], by.x='date.initial',by.y='date', all=T)
colnames(final.df)[kol] <- paste(ticker, type.instr, sep="_")
interim.df <- interim.df[NULL, ]
ticker <- df[[i,'ticker']]
type.instr <- df[[i,'type']]
}
#if (i == nrow(df))
#{kol <- kol+1
#interim.df[order(interim.df$date),]
#final.df <- merge.data.frame(final.df, interim.df[order(interim.df$date),], by.x='date.initial',by.y='date', all=T)
#colnames(final.df)[kol] <- paste(ticker, type.instr, sep="_")
#interim.df <- interim.df[NULL, ]}
}
setwd("C:/Users/Anastasiia/Google Drive/DATA ANALYSIS/Infront/Internship")
library(lubridate)
ex <- read.csv('daily_data.csv', stringsAsFactors=FALSE)
# delete all rows where close price is NA
ex <- ex[!is.na(ex$last), ]
df <- data.frame(ex)
df$date <- dmy(df$date)
ticker <- df[[1,2]]
type.instr <- df[[1,3]]
interim.df <- data.frame()
# create column which contains all dates from 01/01/2014 until 18/05/2017
date.initial <- seq(as.Date("2014-01-01"), as.Date("2017-05-18"), by="days")
final.df <- data.frame(date.initial)
# transform the initial data table: rows - instruments, columns - all dates
# from 01/01/2014 to 18/05/2017
kol <- 1
for (i in 1:nrow(df)){
#select rows with the same security
if (df[i,'ticker'] == ticker & i < nrow(df)){
interim.df <- rbind(interim.df, df[i, c( 'date', 'last')])
}
# allocate security daily closing price data to the corresponding date
# additionally, to each instrument name I addad its type: _64, _1024 or _1
else  {
kol <- kol+1
final.df <- merge.data.frame(final.df, interim.df[order(interim.df$date),], by.x='date.initial',by.y='date', all=T)
colnames(final.df)[kol] <- paste(ticker, type.instr, sep="_")
interim.df <- interim.df[NULL, ]
ticker <- df[[i,'ticker']]
type.instr <- df[[i,'type']]
}
}
source("Data preparation.R")
source("Functions.R")
task1 <- clean.data(final.df, 1)
task2 <- clean.data(final.df, 2)
data.set <- kmeans.dataset(task1, 1, 2)
# split dataset into 2 samples: 85% for trainind and 15% for testing
number.of.rows <- round(nrow(data.set)*0.85, 0)
training.set <- data.set[1:number.of.rows,]
testing.set <- data.set[(number.of.rows+1):nrow(data.set),]
kmeans.optimal.cluster(training.set, 2)
# Please, set the optimal number of clusters
opt.clusters <- 6
# NOTE: kmeans.results, kmeans.results.hc and HMM.results variables return
# dataset + corresponding states
kmeans.results <- kmeans.algorithm(training.set,testing.set, opt.clusters, 2)
dendogram <- kmeans.HC.optimal.cluster(training.set, 2)
kmeans.results.hc <- kmeans.HC.algorithm(training.set,dendogram, opt.clusters)
HMM.results <- HMM.analysis(training.set, opt.clusters, 2)
factor.loadings <- data.frame(pca.task(task2))
factor.loadings[,1] <-  as.character(factor.loadings[, 1])
name.split <- c()
for(i in 1:nrow(factor.loadings))
{
name.split <- unlist(strsplit(factor.loadings[i,1], "_", fixed = T))
factor.loadings[i, 1] <- paste(name.split[1])
print(name.split[1])
}
print(factor.loadings)
component.names.pca <- factor.loadings[,1]
# Load data from 'factset_lse.csv'
factset.table <- read.csv('factset_lse.csv', stringsAsFactors=FALSE)
# Transform initial dataset (with all instruments) in order to get prices on the last day
main.table <- data.frame(final.df[nrow(final.df), ])
l <- vector()
l <- colnames(main.table)
l <- l[-1]
main.table <- main.table[-1]
main.table[is.na(main.table)] <- 0
main.table <- data.frame(as.numeric(t(main.table)))
names(main.table) <- "Price on the last day"
main.instrument.name <- vector()
for(i in 1:length(l))
{
name.split <- unlist(strsplit(l[i], "_", fixed = T))
main.instrument.name[i] <- paste(name.split[1])
}
main.table <- cbind(main.instrument.name, main.table)
# Obtain EPS, Dividends for corresponding instruments from 'factset_lse.csv'
ticker.names.factset <- factset.table$ticker
index.of.instrument <- vector()
dividend <- vector()
eps <- vector()
price <- vector()
price.index <- 0
for (i in 1:nrow(factor.loadings)){
if ( length(which(ticker.names.factset %in% component.names.pca[i])) == 0)
{index.of.instrument[i] <- 0
dividend[i] <- 0
eps[i] <- 0
price[i] <- 0
} else
{index.of.instrument[i] <- which(ticker.names.factset %in% component.names.pca[i])
dividend[i] <- factset.table$dividend_reported[index.of.instrument[i]]
eps[i] <- factset.table$eps[index.of.instrument[i]]
price.index <- which(main.table[,1] %in% component.names.pca[i])
price[i] <- main.table$`Price on the last day`[price.index]
if (dividend[i] == 0 | eps[i]==0 | price[i]==0)  # if any metric is 0 - make all others equal to 0 (division by 0 problem)
{dividend[i] <- 0
eps[i] <- 0
price[i] <- 0
}
}
}
# this is a combined table with instruments` name, Component loadings and all needed metrics
fac <- cbind.data.frame(component.names.pca,factor.loadings$Comp.1,factor.loadings$Comp.2, factor.loadings$Comp.3,  price, dividend, eps)
colnames(fac)[1:4] <- paste(c("Instrument", "Comp.1", "Comp.2", "Comp.3"))
# calculate average ratios for each component
fac$PE.Comp.1 <-fac$Comp.1*fac$price/fac$eps
fac$Div.Yield.Comp.1 <-fac$Comp.1*fac$dividend/fac$price
fac$PE.Comp.2 <-fac$Comp.2*fac$price/fac$eps
fac$Div.Yield.Comp.2 <-fac$Comp.2*fac$dividend/fac$price
fac$PE.Comp.3 <-fac$Comp.3*fac$price/fac$eps
fac$Div.Yield.Comp.3 <-fac$Comp.3*fac$dividend/fac$price
fac[is.na(fac)] <- 0
print(fac)
write.csv(fac, file='Results.csv')
PE <- vector()
DY <- vector()
mean.PE <- c(sum(fac$PE.Comp.1), sum(fac$PE.Comp.2), sum(fac$PE.Comp.3))
mean.PE <- mean(mean.PE)
PE <- c(sum(fac$PE.Comp.1), sum(fac$PE.Comp.2), sum(fac$PE.Comp.3), mean.PE)
mean.DY <- mean(sum(fac$Div.Yield.Comp.1), sum(fac$Div.Yield.Comp.2), sum(fac$Div.Yield.Comp.3))
mean.DY <- mean(mean.DY)
DY <- c(sum(fac$Div.Yield.Comp.1),sum(fac$Div.Yield.Comp.2), sum(fac$Div.Yield.Comp.3), mean.DY)
# print results in a table
results <- rbind(PE, DY)
colnames(results) <- c("Comp.1", "Comp.2", "Comp.3", "Average")
print(round(results,5))
